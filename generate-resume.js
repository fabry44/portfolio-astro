import { exec } from 'child_process';
import wkhtmltopdf from 'wkhtmltopdf';
import * as path from 'path';
import { fileURLToPath } from 'url';
import * as fs from 'fs';

// Obtenir le chemin du r√©pertoire courant
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const outputDir = path.join(__dirname, 'dist');  

// V√©rifier que le dossier `dist/` existe
if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

// D√©finition des chemins des fichiers
const htmlPath = path.join(outputDir, 'cv_fabien_roy.html');
const pdfPath = path.join(outputDir, 'cv_fabien_roy.pdf');
const generateHtmlCommand = `npx resumed render --theme jsonresume-theme-macchiato/index.js --output ${htmlPath}`;

// Ex√©cuter la commande pour g√©n√©rer le HTML
exec(generateHtmlCommand, (error, stdout, stderr) => {
  if (error) {
    console.error(`‚ùå Erreur lors de la g√©n√©ration du HTML: ${error.message}`);
    return;
  }
  console.log(`‚úÖ HTML g√©n√©r√© avec succ√®s: ${stdout}`);

  // V√©rifier si le fichier HTML a bien √©t√© cr√©√©
  if (!fs.existsSync(htmlPath)) {
    console.error("‚ùå Erreur : Le fichier HTML n'a pas √©t√© trouv√© !");
    return;
  }

  console.log("üìÑ Lancement de wkhtmltopdf pour g√©n√©rer le PDF...");

  // G√©n√©rer le PDF avec wkhtmltopdf
  wkhtmltopdf(fs.readFileSync(htmlPath, 'utf8'), { output: pdfPath }, (err) => {
    if (err) {
      console.error("‚ùå Erreur lors de la g√©n√©ration du PDF:", err);
    } else {
      console.log(`‚úÖ PDF g√©n√©r√© avec succ√®s: ${pdfPath}`);
    }
  });
});
